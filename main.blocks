<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id="i$H31RUxnjIa*jq-XlSU">_unifont</variable><variable type="KIND_SpriteKind" id="cWiZ$9Cs~/(A0XJh]lCu">_unisrc</variable></variables><block type="pxt-on-start" id="6Dn0`^)$bz_q%4^~I`z^" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="#2[,:QGBRX#{0n*$3X0b" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace unifont {" line1="" line2="    let rendering = false;let tablename: string[] = []; let ligs: string[][] = []; let ligages: Image[][] = []; let ligwidth: number[][] = []; let ligsubw: number[][] = []; let ligdir: number[][] = []; let ligcol: number[][] = []; let ligul: number[][] = []; let storeid: number[] = []; let letterspace: number = 1; let curid = 0; let lineheight = 1;" line3="" line4="    function gettableid(name: string) {" line5="        if (tablename.indexOf(name) &lt; 0) {" line6="        tablename.push(name); storeid.push(curid); ligs.push([]); ligages.push([]); ligwidth.push([]); ligsubw.push([]); ligdir.push([]); ligcol.push([]); ligul.push([]); curid += 1;" line7="        return tablename.length - 1" line8="        }" line9="        return tablename.indexOf(name)" line10="    }" line11="" line12="    function drawTransparentImage(src: Image, to: Image, x: number, y: number) {" line13="        if (!src || !to) { return; }" line14="        to.drawTransparentImage(src, x, y)" line15="    }" line16="" line17="    function findCommand(tvj: string, chj: string = &quot;&quot;, nvj: number): boolean {" line18="        if (((nvj &lt; tvj.length &amp;&amp; tvj.charAt(nvj)) &amp;&amp; (nvj + 1 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 1) == &quot;\\&quot;)) &amp;&amp; ((nvj + 2 &lt; tvj.length &amp;&amp; chj.length &lt;= 0))) { return true }" line19="        if (chj.length != 1) { return false }" line20="        if (((nvj + 1 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 1) == &quot;\\&quot;)) &amp;&amp; ((nvj + 2 &lt; tvj.length &amp;&amp; tvj.charAt(nvj + 2) == chj))) { return true }" line21="        return false" line22="    }" line23="" line24="    function deepChar(tid: number = 0, idx: number = 0, charstr: string = &quot;&quot;) {" line25="        let ustr = charstr.charAt(idx)" line26="        let ic = 1" line27="        let uc = charstr.charAt(idx + ic)" line28="        let istr = &quot;&quot; + ustr + uc" line29="        if (ligs[tid].indexOf(istr) &lt; 0) { return ustr }" line30="        while (ligs[tid].indexOf(istr) &gt;= 0) {" line31="            ustr = &quot;&quot; + ustr + uc" line32="            ic++" line33="            uc = charstr.charAt(idx + ic)" line34="            istr = &quot;&quot; + ustr + uc" line35="            if (idx + ic &gt;= charstr.length) { break }" line36="        }" line37="        return ustr" line38="    }" line39="    " line40="    function drawOutline(Inputi: Image, color: number, dir8: boolean) {" line41="        let dxl: number[] = [1,0,-1,0]" line42="        let dyl: number[] = [0,1,0,-1]" line43="        if (dir8) {" line44="            dxl = [1,1,1,0,-1,-1,-1,0]" line45="            dyl = [1,0,-1,-1,-1,0,1,1]" line46="        }" line47="        let Uinputi = Inputi.clone()" line48="        for (let curcol = 1;curcol &lt; 16; curcol++) {" line49="            Uinputi.replace(curcol,color)" line50="        }" line51="        let Outputi = image.create(Inputi.width+2,Inputi.height+2)" line52="        for (let curdir = 0; curdir &lt; Math.min(dxl.length,dyl.length); curdir++) {" line53="            drawTransparentImage(Uinputi,Outputi,1+dxl[curdir],1+dyl[curdir])" line54="        }" line55="        drawTransparentImage(Inputi,Outputi,1,1)" line56="        return Outputi" line57="    }" line58="" line59="    function SetImgFrame(ImgF: Image, Wh: number, Ht: number) {" line60="        let ImgOutput = image.create(Wh, Ht)" line61="        let Twidt = Math.floor(ImgF.width / 3)" line62="        let Theig = Math.floor(ImgF.height / 3)" line63="        let ImgTable: Image[] = []" line64="        let Uimg: Image = null" line65="        let sw = 0" line66="        let sh = 0" line67="        for (let hj = 0; hj &lt; 3; hj++) {" line68="            for (let wi = 0; wi &lt; 3; wi++) {" line69="                Uimg = image.create(Twidt, Theig)" line70="                drawTransparentImage(ImgF, Uimg, 0 - wi * Twidt, 0 - hj * Theig)" line71="                ImgTable.push(Uimg.clone())" line72="            }" line73="        }" line74="        for (let wi2 = 0; wi2 &lt; Math.floor(Wh / Twidt); wi2++) {" line75="            for (let hj2 = 0; hj2 &lt; Math.floor(Ht / Theig); hj2++) {" line76="                sw = Math.min(wi2 * Twidt, Wh - Twidt)" line77="                sh = Math.min(hj2 * Theig, Ht - Theig)" line78="                if (hj2 == 0 &amp;&amp; wi2 == 0) {" line79="                    drawTransparentImage(ImgTable[0], ImgOutput, sw, sh)" line80="                } else if (hj2 == Math.floor(Ht / Theig) - 1 &amp;&amp; wi2 == Math.floor(Wh / Twidt) - 1) {" line81="                    drawTransparentImage(ImgTable[8], ImgOutput, sw, sh)" line82="                } else if (hj2 == Math.floor(Ht / Theig) - 1 &amp;&amp; wi2 == 0) {" line83="                    drawTransparentImage(ImgTable[6], ImgOutput, sw, sh)" line84="                } else if (hj2 == 0 &amp;&amp; wi2 == Math.floor(Wh / Twidt) - 1) {" line85="                    drawTransparentImage(ImgTable[2], ImgOutput, sw, sh)" line86="                } else {" line87="                    if (wi2 &gt; 0 &amp;&amp; wi2 &lt; Math.floor(Wh / Twidt) - 1) {" line88="                        if (hj2 == 0) {" line89="                            drawTransparentImage(ImgTable[1], ImgOutput, sw, sh)" line90="                        } else if (hj2 == Math.floor(Ht / Theig) - 1) {" line91="                            drawTransparentImage(ImgTable[7], ImgOutput, sw, sh)" line92="                        } else {" line93="                            drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)" line94="                        }" line95="                    } else if (hj2 &gt; 0 &amp;&amp; hj2 &lt; Math.floor(Ht / Theig) - 1) {" line96="                        if (wi2 == 0) {" line97="                            drawTransparentImage(ImgTable[3], ImgOutput, sw, sh)" line98="                        } else if (wi2 == Math.floor(Wh / Twidt) - 1) {" line99="                            drawTransparentImage(ImgTable[5], ImgOutput, sw, sh)" line100="                        } else {" line101="                            drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)" line102="                        }" line103="                    } else {" line104="                        drawTransparentImage(ImgTable[4], ImgOutput, sw, sh)" line105="                    }" line106="                }" line107="            }" line108="        }" line109="        return ImgOutput" line110="    }" line111="" line112="    function background(then: () =&gt; void) {" line113="        control.runInBackground(then)" line114="    }" line115="" line116="    function after(time: number, thenDo: () =&gt; void) {" line117="        setTimeout(thenDo, time)" line118="    }" line119="" line120="    //%block=&quot;$name&quot;" line121="    //%blockId=unifont_tablenameshadow" line122="    //%blockHidden=true shim=TD_ID" line123="    //%name.fieldEditor=&quot;autocomplete&quot; name.fieldOptions.decompileLiterals=true" line124="    //%name.fieldOptions.key=&quot;tablenameshadow&quot;" line125="    export function _tableNameShadow(name: string) {" line126="        return name" line127="    }" line128="" line129="    /**" line130="     * add charcter glyph to the table" line131="     */" line132="    //%blockid=unifont_setcharecter" line133="    //%block=&quot;set |table id $gid and set letter $glyph to img $imgi=screen_image_picker||and |the letter can move? $notmove and stay on or under the letter? $onthechar and substract width $inchar erase col $bcol spacebar col $scol base col $mcol guard col $ncol&quot;" line134="    //%gid.shadow=unifont_tablenameshadow gid.defl=&quot;fonttemp&quot;" line135="    //%bcol.shadow=colorindexpicker" line136="    //%scol.shadow=colorindexpicker" line137="    //%mcol.shadow=colorindexpicker" line138="    //%ncol.shadow=colorindexpicker" line139="    //%group=&quot;create&quot;" line140="    //%weight=2" line141="    export function setCharecter(gid: string = &quot;fonttemp&quot;, glyph: string = &quot;&quot;, imgi: Image = image.create(5, 8), notmove: boolean = false, onthechar: boolean = false, inchar: boolean = false, bcol: number = 0, scol: number = 0, mcol: number = 0, ncol: number = 0) {" line142="        let tid = gettableid(gid)" line143="        let sncol = true; let scnwidt = true; let scwidt = false; let wi3 = 0; let wj = 0; let si = 0; let imgj = image.create(imgi.width, imgi.height);" line144="        if (bcol &gt; 0 &amp;&amp; bcol &lt; 16) {" line145="            imgi.replace(bcol, 0)" line146="        }" line147="        for (let xw = 0; xw &lt; imgi.width; xw++) {" line148="            si = 0" line149="            for (let yh = 0; yh &lt; imgi.height; yh++) {" line150="                if (imgi.getPixel(xw, yh) &gt; 0 || (scwidt &amp;&amp; imgi.getPixel(xw + 1, yh) &gt; 0)) { si += 1 }" line151="            }" line152="            if (scnwidt) {" line153="                if (scwidt) {" line154="                    if (si &lt;= 0) { wj = xw; scnwidt = false; break;}" line155="                } else {" line156="                    if (si &gt; 0) { wi3 = xw; scwidt = true; }" line157="                }" line158="            }" line159="        }" line160="        if (scnwidt) { wj = imgi.width; scnwidt = false; }" line161="        imgj = image.create(Math.abs(wj - wi3), imgi.height); drawTransparentImage(imgi, imgj, 0 - wi3, 0);" line162="        if (scol &gt; 0 &amp;&amp; scol &lt; 16) {" line163="            imgj.replace(scol, 0)" line164="        }" line165="        let uwid = 0" line166="        if (inchar) {" line167="            for (let xw2 = imgi.width - 1; xw2 &gt;= 0; xw2--) {" line168="                si = 0" line169="                for (let yh2 = 0; yh2 &lt; imgi.height; yh2++) {" line170="                    if (imgi.getPixel(xw2, yh2) &gt; 0) { si += 1 }" line171="                }" line172="                if (scnwidt) {" line173="                    if (scwidt) {" line174="                        if (si &lt;= 0) { wj = xw2; scnwidt = false; break;}" line175="                    } else {" line176="                        if (si &gt; 0) { wi3 = xw2; scwidt = true; }" line177="                    }" line178="                }" line179="            }" line180="            if (scnwidt) { wj = imgi.width; scnwidt = false; }" line181="            uwid = Math.abs(wi3 - wj); if (true) {uwid = wj}" line182="        }" line183="" line184="        if (ligs[tid].indexOf(glyph) &lt; 0) {" line185="            ligul[tid].push(ncol)" line186="            ligcol[tid].push(mcol)" line187="            ligs[tid].push(glyph); ligages[tid].push(imgj);" line188="            if (notmove) {" line189="                if (onthechar) {" line190="                    ligdir[tid].push(10)" line191="                } else {" line192="                    ligdir[tid].push(-10)" line193="                }" line194="                ligwidth[tid].push(0)" line195="                ligsubw[tid].push(0)" line196="            } else {" line197="                if (uwid == 0) {" line198="                    ligsubw[tid].push(imgj.width)" line199="                } else {" line200="                    ligsubw[tid].push(uwid)" line201="                }" line202="                ligwidth[tid].push(imgj.width)" line203="                ligdir[tid].push(0)" line204="            }" line205="        } else {" line206="            ligul[tid][ligs[tid].indexOf(glyph)] = ncol" line207="            ligcol[tid][ligs[tid].indexOf(glyph)] = mcol" line208="            ligages[tid][ligs[tid].indexOf(glyph)] = imgj" line209="            if (notmove) {" line210="                if (onthechar) {" line211="                    ligdir[tid][ligs[tid].indexOf(glyph)] = 10" line212="                } else {" line213="                    ligdir[tid][ligs[tid].indexOf(glyph)] = -10" line214="                }" line215="                ligwidth[tid][ligs[tid].indexOf(glyph)] = 0" line216="                ligsubw[tid][ligs[tid].indexOf(glyph)] = 0" line217="            } else {" line218="                if (uwid == 0) {" line219="                    ligsubw[tid][ligs[tid].indexOf(glyph)] = imgj.width" line220="                } else {" line221="                    ligsubw[tid][ligs[tid].indexOf(glyph)] = uwid" line222="                }" line223="                ligwidth[tid][ligs[tid].indexOf(glyph)] = imgj.width" line224="                ligdir[tid][ligs[tid].indexOf(glyph)] = 0" line225="            }" line226="        }" line227="    }" line228="" line229="    /**" line230="     * add more glyph" line231="     * from charcter sheet" line232="     * to the table" line233="     */" line234="    //%blockid=unifont_setcharfromimgsheet" line235="    //%block=&quot;set |table id $tid and set img sheet $PngSheet=screen_image_picker with letters $GroupChar||and |staying letters $StayChar letters on the letters $CharOnChar and Char Substact $CharSubW width $twid height $thei erase col $bcl space col $scl base col $mcl guard col $ncl&quot;" line236="    //%tid.shadow=unifont_tablenameshadow tid.defl=&quot;fonttemp&quot;" line237="    //%bcl.shadow=colorindexpicker" line238="    //%scl.shadow=colorindexpicker" line239="    //%mcl.shadow=colorindexpicker" line240="    //%ncl.shadow=colorindexpicker" line241="    //%group=&quot;create&quot;" line242="    //%weight=4" line243="    export function setCharFromSheet(tid: string = &quot;fonttemp&quot;, PngSheet: Image = image.create(10, 16), GroupChar: string = &quot;&quot;, StayChar: string = &quot;&quot;, CharOnChar: string = &quot;&quot;, CharSubW: string = &quot;&quot;, twid: number = 5, thei: number = 8, bcl: number = 0, scl: number = 0, mcl: number = 0, ncl: number = 0) {" line244="        let gwid = Math.round(PngSheet.width / twid); let uig = image.create(twid, thei); let txi = 0; let tyi = 0;" line245="        for (let tvn = 0; tvn &lt; GroupChar.length; tvn++) {" line246="            uig = image.create(twid, thei); txi = twid * (tvn % gwid); tyi = thei * Math.floor(tvn / gwid); drawTransparentImage(PngSheet, uig, 0 - txi, 0 - tyi); setCharecter(tid, GroupChar.charAt(tvn), uig, StayChar.includes(GroupChar.charAt(tvn)), CharOnChar.includes(GroupChar.charAt(tvn)), CharSubW.includes(GroupChar.charAt(tvn)), bcl, scl, mcl, ncl);" line247="        }" line248="    }" line249="" line250="    /**" line251="     * add more long glyph array" line252="     * from charcter sheet" line253="     * to the table" line254="     */" line255="    //%blockid=unifont_setchararrfromimgsheet" line256="    //%block=&quot;set |table id $tid and set img sheet $PngSheet=screen_image_picker with array of letters $GroupChar||and | array of staying letters $StayChar array of letters on the letters $CharOnChar and array of Char Substact $CharSubW width $twid height $thei erase col $bcl space col $scl base col $mcl guard col $ncl&quot;" line257="    //%tid.shadow=unifont_tablenameshadow tid.defl=&quot;fonttemp&quot;" line258="    //%bcl.shadow=colorindexpicker" line259="    //%scl.shadow=colorindexpicker" line260="    //%mcl.shadow=colorindexpicker" line261="    //%ncl.shadow=colorindexpicker" line262="    //%group=&quot;create&quot;" line263="    //%weight=6" line264="    export function setCharArrFromSheet(tid: string = &quot;fonttemp&quot;, PngSheet: Image = image.create(10, 16), GroupChar: string[] = [], StayChar: string[] = [], CharOnChar: string[] = [], CharSubW: string[] = [], twid: number = 5, thei: number = 8, bcl: number = 0, scl: number = 0, mcl: number = 0, ncl: number = 0) {" line265="        let gwid2 = Math.round(PngSheet.width / twid); let uig2 = image.create(twid, thei); let txi2 = 0; let tyi2 = 0;" line266="        for (let tvn2 = 0; tvn2 &lt; GroupChar.length; tvn2++) {" line267="            uig2 = image.create(twid, thei); txi2 = twid * (tvn2 % gwid2); tyi2 = thei * Math.floor(tvn2 / gwid2); drawTransparentImage(PngSheet, uig2, 0 - txi2, 0 - tyi2); setCharecter(tid, GroupChar[tvn2], uig2, StayChar.indexOf(GroupChar[tvn2]) &gt;= 0, CharOnChar.indexOf(GroupChar[tvn2]) &gt;= 0, CharSubW.indexOf(GroupChar[tvn2]) &gt;= 0, bcl, scl, mcl, ncl);" line268="        }" line269="    }" line270="" line271="    /**" line272="     * read the length of" line273="     * my charcter in table" line274="     */" line275="    //%blockid=unifont_numofglyphs" line276="    //%block=&quot;number of glyphs in table id $gid&quot;" line277="    //%gid.shadow=unifont_tablenameshadow gid.defl=&quot;fonttemp&quot;" line278="    //%group=&quot;datainfo&quot;" line279="    //%weight=2" line280="    export function NumOfGlyphs(gid: string = &quot;fonttemp&quot;): number {" line281="        let tid2 = gettableid(gid)" line282="        return ligs[tid2].length" line283="    }" line284="" line285="    /**" line286="     * read the array charcter image" line287="     * of my table" line288="     */" line289="    //%blockid=unifont_arrofgypimg" line290="    //%block=&quot;array of glyph images in table id $gid&quot;" line291="    //%gid.shadow=unifont_tablenameshadow gid.defl=&quot;fonttemp&quot;" line292="    //%group=&quot;datainfo&quot;" line293="    //%weight=4" line294="    export function ImageArray(gid: string = &quot;fonttemp&quot;): Image[] {" line295="        let tid3 = gettableid(gid)" line296="        return ligages[tid3]" line297="    }" line298="" line299="    /**" line300="     * read the array charcter" line301="     * of my table" line302="     */" line303="    //%blockid=unifont_arrofglyphs" line304="    //%block=&quot;array of glyphs in table id $gid&quot;" line305="    //%gid.shadow=unifont_tablenameshadow gid.defl=&quot;fonttemp&quot;" line306="    //%group=&quot;datainfo&quot;" line307="    //%weight=6" line308="    export function GlyphArray(gid: string = &quot;fonttemp&quot;): String[] {" line309="        let tid4 = gettableid(gid) " line310="        return ligs[tid4]" line311="    }" line312="" line313="    function SetTextImgValue(arrm: boolean,input: string, iwidt: number, lid: string, icol: number = 0, bcol: number = 0, alm: number = 0, debugalm: boolean = false, spacew: number = undefined, lineh: number = undefined) {" line314="        let tid5 = gettableid(lid)" line315="        if (rendering) { if (arrm) { return [image.create(1,1)] as Image[] } else { return image.create(1,1) as Image } }" line316="        rendering = true" line317="        if (lineh == undefined) { lineh = lineheight}" line318="        if (spacew == undefined) { spacew = letterspace}" line319="        let curchar = &quot;&quot;, curchar2 = &quot;&quot;; let uhei = 0; let outputarr: Image[] = []; let lnwit: number[] = []; let heig = 0; let widt = 0; let curwidt = 0; let uwidt = 0; let swidt = 0; let nwidt = 0; let wie = 0; let hie = 0; let hvi = 0;" line320="        for (let currentletter = 0; currentletter &lt; input.length; currentletter++) {" line321="            curchar = deepChar(tid5, currentletter, input)" line322="            if (!(ligs[tid5].indexOf(curchar) &lt; 0)) {" line323="                uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))]" line324="                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] &lt;= 0) {" line325="                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width" line326="                } else {" line327="                    nwidt = 0" line328="                }" line329="                if (uwidt &gt; 0) {" line330="                    swidt = uwidt" line331="                } else {" line332="                    swidt = 0" line333="                }" line334="                curchar2 = deepChar(tid5, currentletter + 1, input)" line335="                if ((curchar2 != curchar) &amp;&amp; Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) &gt; 0) {" line336="                    wie += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))" line337="                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) &gt; 0) {" line338="                    wie += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]" line339="                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] &gt; 0) {" line340="                    wie += Math.abs(uwidt - nwidt)" line341="                }" line342="                if ((iwidt &lt;= 0 || !(findCommand(input, &quot;n&quot;, currentletter))) &amp;&amp; (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter + Math.max(curchar.length, 1), input.length - 1))))] &gt; 0 || currentletter + (curchar.length - 1) &gt;= input.length - 1)) {" line343="                    wie += spacew" line344="                }" line345="                hvi = ligages[tid5][(ligs[tid5].indexOf(curchar))].height" line346="            } else if (input.charAt(currentletter) == &quot; &quot;) {" line347="                wie += 3 * spacew" line348="            } else {" line349="                wie += 2 * spacew" line350="            }" line351="            uhei = Math.max(uhei, hvi), heig = Math.max(heig, hie + hvi)" line352="            if (iwidt &gt; 0) {" line353="                if (wie &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter)) {" line354="                    if (uhei &gt; hvi) {" line355="                        hie += uhei" line356="                    } else {" line357="                        hie += hvi" line358="                    }" line359="                    hie += lineh" line360="                    wie = 0;" line361="                    if (findCommand(input, &quot;n&quot;, currentletter)) {" line362="                        currentletter += 2" line363="                    }" line364="                }" line365="            } else if (findCommand(input, &quot;n&quot;, currentletter)) {" line366="                currentletter += 2" line367="            }" line368="            if (curchar.length - 1 &gt; 0) { currentletter += curchar.length - 1 }" line369="        }" line370="        wie = 0, widt = 0; let hix = 0;" line371="        for (let currentletter2 = 0; currentletter2 &lt; input.length; currentletter2++) {" line372="            curchar = deepChar(tid5, currentletter2, input)" line373="            if (!(ligs[tid5].indexOf(curchar) &lt; 0)) {" line374="                uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))]" line375="                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] &lt;= 0) {" line376="                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width" line377="                } else {" line378="                    nwidt = 0" line379="                }" line380="                if (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter2 + curchar.length, input.length - 1))))] &lt;= 0) {" line381="                    swidt = uwidt" line382="                } else {" line383="                    swidt = 0" line384="                }" line385="                curchar2 = deepChar(tid5, currentletter2 + 1, input)" line386="                if ((curchar2 != curchar) &amp;&amp; Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) &gt; 0) {" line387="                    wie += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))" line388="                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) &gt; 0) {" line389="                    wie += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]" line390="                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] &gt; 0) {" line391="                    wie += Math.abs(uwidt - nwidt)" line392="                }" line393="                if ((iwidt &lt;= 0 || !(findCommand(input, &quot;n&quot;, currentletter2))) &amp;&amp; (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter2 + Math.max(curchar.length, 1), input.length - 1))))] &gt; 0 || currentletter2 + (curchar.length - 1) &gt;= input.length - 1)) {" line394="                    wie += spacew" line395="                }" line396="            } else if (input.charAt(currentletter2) == &quot; &quot;) {" line397="                wie += 3 * spacew" line398="            } else {" line399="                wie += 2 * spacew" line400="            }" line401="            if (false) { widt = Math.max(widt, wie) }" line402="            if (iwidt &gt; 0) {" line403="                if (wie &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter2)) {" line404="                    if (debugalm &amp;&amp; findCommand(input, &quot;n&quot;, currentletter2)) {" line405="                        wie -= (3 * letterspace) + letterspace; widt = Math.max(widt, wie)" line406="                    } else {" line407="                        widt = Math.max(widt, wie)" line408="                    }" line409="                    lnwit.push(wie); wie = 0; hix += 1" line410="                    if (findCommand(input, &quot;n&quot;, currentletter2)) {" line411="                        currentletter2 += 2" line412="                    }" line413="                } else {" line414="                    widt = Math.max(widt, wie)" line415="                }" line416="            } else if (findCommand(input, &quot;n&quot;, currentletter2)) {" line417="                widt = Math.max(widt, wie); currentletter2 += 2;" line418="            } else {" line419="                widt = Math.max(widt, wie)" line420="            }" line421="            if (curchar.length - 1 &gt; 0) { currentletter2 += curchar.length - 1 }" line422="        }" line423="        if (hix &gt; 0 &amp;&amp; debugalm) { wie += letterspace + (3 * letterspace) }; wie -= letterspace; lnwit.push(wie);" line424="        let hgi = 0; let limg = image.create(lnwit[hgi], heig); let scwidt2 = true, underc = false, scnwidt2 = false; let rimg = image.create(8, 8), output = image.create(widt, heig); let sc = 0; hie = 0; wie = 0; curwidt = 0;" line425="        let uoutput: Image = image.create(output.width, output.height), uuoutput: Image = image.create(output.width, output.height);" line426="        if (bcol &gt; 0) { uoutput = image.create(output.width+2,output.height+2) }" line427="        for (let currentletter3 = 0; currentletter3 &lt; input.length; currentletter3++) {" line428="            wie = 0; curchar = deepChar(tid5, currentletter3, input)" line429="            if (!(ligs[tid5].indexOf(curchar) &lt; 0)) {" line430="                hvi = ligages[tid5][(ligs[tid5].indexOf(curchar))].height; uwidt = ligwidth[tid5][(ligs[tid5].indexOf(curchar))];" line431="                if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] &lt;= 0) {" line432="                    nwidt = ligages[tid5][(ligs[tid5].indexOf(curchar))].width" line433="                } else {" line434="                    nwidt = 0" line435="                }" line436="                scwidt2 = false; scnwidt2 = false; wie = 0; rimg = ligages[tid5][(ligs[tid5].indexOf(curchar))].clone(); let ccol = ligul[tid5][ligs[tid5].indexOf(input.charAt(currentletter3))];" line437="                if (ligwidth[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] &gt; 0 &amp;&amp; ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] == 0) {" line438="                    rimg.replace(ccol, ligcol[tid5][ligs[tid5].indexOf(curchar)])" line439="                } else if (ligwidth[tid5][ligs[tid5].indexOf(curchar)] &gt; 0 &amp;&amp; ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] &lt; 0) {" line440="                    rimg.replace(ccol, 0)" line441="                } else if (ligwidth[tid5][ligs[tid5].indexOf(curchar)] &gt; 0 &amp;&amp; ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1)))] &gt; 0) {" line442="                    rimg.replace(ccol, ligcol[tid5][ligs[tid5].indexOf(curchar)])" line443="                }" line444="                if (Math.abs(ligdir[tid5][ligs[tid5].indexOf(curchar)]) &gt; 0 &amp;&amp; Math.abs(ligdir[tid5][ligs[tid5].indexOf(input.charAt(Math.max(currentletter3 - 1, 0)))]) == 0) {" line445="                    sc = 1; wie = 0;" line446="                    while (sc &gt; 0) {" line447="                        sc = 0" line448="                        for (let yh3 = 0; yh3 &lt; rimg.height; yh3++) {" line449="                            if (limg.getPixel((curwidt - letterspace) - wie, yh3) == rimg.getPixel(rimg.width - 1, yh3) &amp;&amp; (limg.getPixel((curwidt - letterspace) - wie, yh3) != 0 &amp;&amp; limg.getPixel((curwidt - letterspace) - wie, yh3) != 0)) {" line450="                                sc += 1" line451="                            }" line452="                        }" line453="                        if (sc &gt; 0 || (sc == 0 &amp;&amp; wie &gt; 0)) {" line454="                            wie += 1" line455="                        }" line456="                    }" line457="                }" line458="                if (wie &lt; 0) { wie = Math.abs(wie) }" line459="                drawTransparentImage(rimg, limg, curwidt - (nwidt + wie), 0 + (hvi - ligages[tid5][(ligs[tid5].indexOf(curchar))].height))" line460="                if (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + curchar.length, input.length - 1))))] == 0) {" line461="                    swidt = uwidt" line462="                } else {" line463="                    swidt = 0" line464="                }" line465="                curchar2 = deepChar(tid5, currentletter3 + 1, input)" line466="                if ((curchar2 != curchar) &amp;&amp; Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]) &gt; 0) {" line467="                    curwidt += Math.abs(ligwidth[tid5][ligs[tid5].indexOf(curchar)] - Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar2)] - ligwidth[tid5][ligs[tid5].indexOf(curchar2)]))" line468="                } else if (Math.abs(ligsubw[tid5][ligs[tid5].indexOf(curchar)] - ligwidth[tid5][ligs[tid5].indexOf(curchar)]) &gt; 0) {" line469="                    curwidt += ligsubw[tid5][(ligs[tid5].indexOf(curchar))]" line470="                } else if (ligwidth[tid5][(ligs[tid5].indexOf(curchar))] &gt; 0) {" line471="                    curwidt += Math.abs(uwidt - nwidt)" line472="                }" line473="                if ((iwidt &lt;= 0 || !(findCommand(input, &quot;n&quot;, currentletter3))) &amp;&amp; (ligwidth[tid5][(ligs[tid5].indexOf(input.charAt(Math.min(currentletter3 + Math.max(curchar.length, 1), input.length - 1))))] &gt; 0 || currentletter3 + (curchar.length - 1) &gt;= input.length - 1)) {" line474="                    curwidt += spacew" line475="                }" line476="            } else if (input.charAt(currentletter3) == &quot; &quot;) {" line477="                curwidt += 3 * spacew" line478="            } else {" line479="                curwidt += 2 * spacew" line480="            }" line481="            uhei = Math.max(uhei, hvi)" line482="            uuoutput = output.clone()" line483="            if (alm &lt; 0) {" line484="                drawTransparentImage(limg.clone(), uuoutput, 0, hie)" line485="            } else if (alm &gt; 0) {" line486="                drawTransparentImage(limg.clone(), uuoutput, Math.abs(output.width - Math.min(curwidt,limg.width)), hie)" line487="            } else if (alm == 0) {" line488="                drawTransparentImage(limg.clone(), uuoutput, Math.abs((output.width / 2) - (Math.min(curwidt,limg.width) / 2)), hie)" line489="            }" line490="            if (icol &gt; 0) {" line491="                for (let ico = 1; ico &lt; 16; ico++) {" line492="                    uuoutput.replace(ico, icol)" line493="                }" line494="            }" line495="            if (bcol &gt; 0) {uuoutput = drawOutline(uuoutput.clone(),bcol,true) } else { uoutput = uuoutput.clone() }" line496="            outputarr.push(uuoutput.clone())" line497="            if (iwidt &gt; 0) {" line498="                if (curwidt &gt;= iwidt || findCommand(input, &quot;n&quot;, currentletter3)) {" line499="                    if (alm &lt; 0) {" line500="                        drawTransparentImage(limg.clone(), output, 0, hie)" line501="                    } else if (alm &gt; 0) {" line502="                        drawTransparentImage(limg.clone(), output, Math.abs(output.width - limg.width), hie)" line503="                    } else if (alm == 0) {" line504="                        drawTransparentImage(limg.clone(), output, Math.abs((output.width / 2) - (limg.width / 2)), hie)" line505="                    }" line506="                    if (icol &gt; 0) {" line507="                        for (let ico2 = 1; ico2 &lt; 16; ico2++) {" line508="                            output.replace(ico2, icol)" line509="                        }" line510="                    }" line511="                    if (bcol &gt; 0) { uoutput = drawOutline(output.clone(), bcol, true) } else { uoutput = output.clone() }" line512="                    outputarr.push(uoutput.clone())" line513="                    hgi += 1; limg = image.create(lnwit[hgi], heig); curwidt = 0;" line514="                    if (uhei &gt; hvi) {" line515="                        hie += uhei" line516="                    } else {" line517="                        hie += hvi" line518="                    }" line519="                    hie += lineh" line520="                    if (findCommand(input, &quot;n&quot;, currentletter3)) {" line521="                        currentletter3 += 2" line522="                    }" line523="                }" line524="            } else if (findCommand(input, &quot;n&quot;, currentletter3)) {" line525="                currentletter3 += 2" line526="            }" line527="            if (curchar.length - 1 &gt; 0) { currentletter3 += curchar.length - 1 }" line528="        }" line529="        if (alm &lt; 0) {" line530="            drawTransparentImage(limg.clone(), output, 0, hie)" line531="        } else if (alm &gt; 0) {" line532="            drawTransparentImage(limg.clone(), output, Math.abs(output.width - limg.width), hie)" line533="        } else if (alm == 0) {" line534="            drawTransparentImage(limg.clone(), output, Math.abs((output.width / 2) - (limg.width / 2)), hie)" line535="        }" line536="        if (icol &gt; 0) {" line537="            for (let ico3 = 1; ico3 &lt; 16; ico3++) {" line538="                output.replace(ico3, icol)" line539="            }" line540="        }" line541="        if (bcol &gt; 0) { uoutput = drawOutline(output,bcol,true) } else { uoutput = output.clone() }" line542="        outputarr.push(uoutput.clone())" line543="        rendering = false" line544="        if (arrm) { return outputarr as Image[] }" line545="        output = uoutput.clone()" line546="        return output as Image" line547="    }" line548="    " line549="    /**" line550="     * render text from my table" line551="     * to the image" line552="     */" line553="    //%blockid=unifont_setimgfromtext" line554="    //%block=&quot;create the image of |text $input in page width $iwidt from table id $tid||and |fill col $icol with outline $bcol and got alignment $alm and get debugalm $debugalm&quot;" line555="    //%tid.shadow=unifont_tablenameshadow tid.defl=&quot;fonttemp&quot;" line556="    //%alm.min=-1 alm.max=1 alm.defl=0" line557="    //%icol.shadow=colorindexpicker" line558="    //%bcol.shadow=colorindexpicker" line559="    //%group=&quot;render&quot;" line560="    //%weight=4" line561="    export function SetTextImage(input: string = &quot;&quot;, iwidt: number = 0, tid: string = &quot;fonttemp&quot;, icol: number = 0, bcol: number = 0, alm: number = 0, debugalm: boolean = false,spacew: number = 0, lineh: number = 0) {" line562="        return SetTextImgValue(false, input, iwidt, tid, icol, bcol, alm, debugalm, spacew, lineh) as Image" line563="    }" line564="" line565="    /**" line566="     * render text from my table" line567="     * like basic text animation" line568="     * to image array" line569="     */" line570="    //%blockid=unifont_setimgframefromtext" line571="    //%block=&quot;create the image frame of |text $input in page width $iwidt from table id $tid||and |fill col $icol with outline $bcol and got alignment $alm and get debugalm $debugalm&quot;" line572="    //%tid.shadow=unifont_tablenameshadow tid.defl=&quot;fonttemp&quot;" line573="    //%alm.min=-1 alm.max=1 alm.defl=0" line574="    //%icol.shadow=colorindexpicker" line575="    //%bcol.shadow=colorindexpicker" line576="    //%group=&quot;render&quot;" line577="    //%weight=2" line578="    export function SetTextImageArray(input: string = &quot;&quot;, iwidt: number = 0, tid: string = &quot;fonttemp&quot;, icol: number = 0, bcol: number = 0, alm: number = 0, debugalm: boolean = false, spacew: number = 0, lineh: number = 0) {" line579="        return SetTextImgValue(true, input, iwidt, tid, icol, bcol, alm, debugalm, spacew, lineh) as Image[]" line580="    }" line581="" line582="    /** " line583="     * render text" line584="     * and stamp to " line585="     * my dialog frame" line586="     */" line587="    //%blockid=unifont_stamptexttoframe" line588="    //%block=&quot;StampStrImgToTheDialogFrame $Fimg=dialog_image_picker Text $Txt Text width $Wval TableId $arrid||And text color col $ucol and outline $bcol Alignment $ualm&quot;" line589="    //%arrid.shadow=unifont_tablenameshadow arrid.defl=&quot;fonttemp&quot;" line590="    //%ualm.min=-1 ualm.max=1 ualm.defl=0" line591="    //%ucol.shadow=colorindexpicker" line592="    //%bcol.shadow=colorindexpicker" line593="    //%group=&quot;Dialog render&quot;" line594="    //%weight=4" line595="    export function StampStrToDialog(Fimg: Image, Txt: string = &quot;&quot;, Wval: number = 0, arrid: string = &quot;fonttemp&quot;, ucol: number = 0, bcol: number = 0, ualm: number = 0, spacew: number = 0, lineh: number = 0) {" line596="        let StrImg: Image = SetTextImage(Txt, Wval, arrid, ucol, bcol, ualm, false, spacew, lineh)" line597="        let gapw = Math.floor(Fimg.width / 3)" line598="        let gaph = Math.floor(Fimg.height / 3)" line599="        let UfImg: Image = SetImgFrame(Fimg, StrImg.width + ((gapw * 2) + Math.floor(gapw / 2)), StrImg.height + ((gaph * 2) + Math.floor(gaph / 2)))" line600="        drawTransparentImage(StrImg.clone(), UfImg, gapw, gaph)" line601="        return UfImg" line602="    }" line603="" line604="    /**" line605="     * render text" line606="     * like basic text animation" line607="     * and stamp to " line608="     * my dialog frame" line609="     * as image array" line610="     */" line611="    //%blockid=unifont_stamptextarrtoframe" line612="    //%block=&quot;StampStrAnimToDialogFrame $Fimg=dialog_image_picker Text input $Txt In text width $Wval At table id $arrid||and text color $ucol with outline $bcol And alignment $ualm &quot;" line613="    //%arrid.shadow=unifont_tablenameshadow arrid.defl=&quot;fonttemp&quot;" line614="    //%ualm.min=-1 ualm.max=1 ualm.defl=0" line615="    //%ucol.shadow=colorindexpicker" line616="    //%bcol.shadow=colorindexpicker" line617="    //%group=&quot;Dialog render&quot;" line618="    //%weight=2" line619="    export function StampStrArrToDialog(Fimg: Image, Txt: string = &quot;&quot;, Wval: number = 0, arrid: string = &quot;fonttemp&quot;, ucol: number = 0, bcol: number = 0, ualm: number = 0,spacew: number = 0, lineh: number = 0) {" line620="        let StrImg2: Image[] = SetTextImageArray(Txt, Wval, arrid, ucol, bcol, ualm, false, spacew, lineh)" line621="        let gapw2 = Math.floor(Fimg.width / 3)" line622="        let gaph2 = Math.floor(Fimg.height / 3)" line623="        let UfImg2: Image = SetImgFrame(Fimg, StrImg2[0].width + ((gapw2 * 2) + Math.floor(gapw2 / 2)), StrImg2[0].height + ((gaph2 * 2) + Math.floor(gaph2 / 2)))" line624="        let imgArr: Image[] = []" line625="        let uimg: Image = null" line626="        for (let mgi = 0; mgi &lt; StrImg2.length; mgi++) {" line627="            uimg = UfImg2.clone()" line628="            drawTransparentImage(StrImg2[mgi].clone(), uimg, gapw2, gaph2)" line629="            imgArr.push(uimg)" line630="        }" line631="        return imgArr" line632="    }" line633="" line634="    /**" line635="     * set the letterspace by value" line636="     */" line637="    //%blockid=unifont_setletterspacing" line638="    //%block=&quot;set letter spacing to $input&quot;" line639="    //%group=&quot;modify&quot;" line640="    //%weight=8" line641="    export function SetSpace(input: number) {" line642="        letterspace = input" line643="    }" line644="" line645="    /**" line646="     * change the letterspace by value" line647="     */" line648="    //%blockid=unifont_changeletterspacing" line649="    //%block=&quot;change letter spacing by $input&quot;" line650="    //%group=&quot;modify&quot;" line651="    //%weight=6" line652="    export function ChangeSpace(input: number) {" line653="        letterspace += input" line654="    }" line655="" line656="    /**" line657="     * set the line gap by value" line658="     */" line659="    //%blockid=unifont_setlinegap" line660="    //%block=&quot;set line gap by $input&quot;" line661="    //%group=&quot;modify&quot;" line662="    //%weight=4" line663="    export function SetLine(input: number) {" line664="        lineheight = input" line665="    }" line666="" line667="    /**" line668="     * change the line gap by value" line669="     */" line670="    //%blockid=unifont_changelinegap" line671="    //%block=&quot;change line gap by $input&quot;" line672="    //%group=&quot;modify&quot;" line673="    //%weight=2" line674="    export function ChangeLine(input: number) {" line675="        lineheight += input" line676="    }" line677="" line678="    export enum align { left = -1, center = 0, right = 1}" line679="" line680="    /**" line681="     * get alignment value" line682="     */" line683="    //%blockid=unifont_getalignmentval" line684="    //%block=&quot;get $alg of alignment&quot;" line685="    //%group=&quot;modify&quot;" line686="    export function getAlign(alg: align) {" line687="        return alg" line688="    }" line689="" line690="    export enum tempfont { MainFont = 1, ArcadeFont = 2, LatinMini = 3}" line691="" line692="    /**" line693="     * set charcter" line694="     * from template" line695="     */" line696="    //%blockid=unifont_presetfont" line697="    //%block=&quot;SetupPresetFont $tempf with table id $tid&quot;" line698="    //%tid.shadow=unifont_tablenameshadow tid.defl=&quot;fonttemp&quot;" line699="    //%group=&quot;create&quot;" line700="    //%weight=10" line701="    export function SetupPresetFont(tempf: tempfont, tid: string = &quot;fonttemp&quot;) {" line702="        switch (tempf) {" line703="            case 1:" line704="                _mainfont(tid)" line705="                break;" line706="            case 2:" line707="                _arcadefont(tid)" line708="                break;" line709="            case 3:" line710="                _latinmini(tid)" line711="                break;" line712="            default:" line713="                _mainfont(tid)" line714="                break;" line715="        }" line716="    }" line717="" line718="    function spriteUpdate(Spr: Sprite ) {" line719="        if (!(Spr)) { return; }" line720="        if (sprdata.readDataImage(Spr,&quot;sdim&quot;)) {" line721="            sprdata.setDataImage(Spr, &quot;nextimg&quot;, StampStrToDialog(sprdata.readDataImage(Spr, &quot;sdim&quot;), sprdata.readDataString(Spr, &quot;stxt&quot;), sprdata.readDataNumber(Spr,&quot;stxw&quot;),sprdata.readDataString(Spr,&quot;stid&quot;),sprdata.readDataNumber(Spr,&quot;scol&quot;),sprdata.readDataNumber(Spr,&quot;socol&quot;),sprdata.readDataNumber(Spr,&quot;salg&quot;),sprdata.readDataNumber(Spr,&quot;spacew&quot;),sprdata.readDataNumber(Spr,&quot;lineh&quot;)))" line722="        } else {" line723="            sprdata.setDataImage(Spr, &quot;nextimg&quot;, SetTextImage(sprdata.readDataString(Spr, &quot;stxt&quot;),sprdata.readDataNumber(Spr,&quot;stxw&quot;),sprdata.readDataString(Spr,&quot;stid&quot;),sprdata.readDataNumber(Spr,&quot;scol&quot;),sprdata.readDataNumber(Spr,&quot;socol&quot;),sprdata.readDataNumber(Spr,&quot;salg&quot;),false,sprdata.readDataNumber(Spr,&quot;spacew&quot;),sprdata.readDataNumber(Spr,&quot;lineh&quot;)))" line724="        }" line725="        if (Spr.image.equals(sprdata.readDataImage(Spr,&quot;nextimg&quot;))) { return; }" line726="        Spr.setImage(sprdata.readDataImage(Spr,&quot;nextimg&quot;))" line727="    }" line728="" line729="    export enum SprDataNumType {Tcol=1,Bcol=2,PageW=3,Talg=4}" line730="" line731="    /**" line732="     * create the unifont as sprite" line733="     */" line734="    //%blockid=unifont_sprite_create" line735="    //%block=&quot;create unifont sprite as $Text in color $Col with outline $Bcol in alignment $alg and tableid $Tid||and page width $PageW&quot;" line736="    //%Tid.shadow=unifont_tablenameshadow Tid.defl=&quot;fonttemp&quot;" line737="    //%Col.shadow=colorindexpicker" line738="    //%Bcol.shadow=colorindexpicker" line739="    //%blockSetVariable=&quot;myUnifont&quot;" line740="    //%group=&quot;sprite mode&quot;" line741="    //%weight=22" line742="    export function newUnifontSprite(Text: string = &quot;&quot;, Col: number, Bcol: number, alg: align, Tid: string = &quot;fonttemp&quot;, PageW: number = 0) {" line743="        let _UnifontSprite = sprites.create(img`" line744="            ." line745="        `, SpriteKind._unifont)" line746="        sprdata.setDataString(_UnifontSprite,&quot;stxt&quot;,Text)" line747="        sprdata.setDataNumber(_UnifontSprite,&quot;scol&quot;,Col)" line748="        sprdata.setDataString(_UnifontSprite,&quot;stid&quot;,Tid)" line749="        sprdata.setDataNumber(_UnifontSprite,&quot;stxw&quot;,PageW)" line750="        sprdata.setDataNumber(_UnifontSprite,&quot;salg&quot;,getAlign(alg))" line751="        sprdata.setDataNumber(_UnifontSprite,&quot;spacew&quot;,undefined)" line752="        sprdata.setDataNumber(_UnifontSprite,&quot;lineh&quot;,undefined)" line753="        sprdata.setDataNumber(_UnifontSprite,&quot;socol&quot;,Bcol)" line754="        spriteUpdate(_UnifontSprite)" line755="        _UnifontSprite.setPosition(Math.floor(scene.screenWidth() / 2), Math.floor(scene.screenHeight() / 2))" line756="        return _UnifontSprite" line757="    }" line758="    " line759="    /**" line760="     * get text data" line761="     * from unifont sprite" line762="     */" line763="    //%blockid=unifont_sprite_readtxt" line764="    //%block=&quot;get $myUnifont as text data&quot;" line765="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line766="    //%group=&quot;sprite mode&quot;" line767="    //%weight=18" line768="    export function getSpriteText(myUnifont:Sprite) {" line769="        return sprdata.readDataString(myUnifont,&quot;stxt&quot;)" line770="    }" line771="" line772="    /**" line773="     * get unifont sprite" line774="     * in sprite array" line775="     */" line776="    //%blockid=unifont_sprite_uniarray" line777="    //%block=&quot;array of all unifont sprite&quot;" line778="    //%group=&quot;sprite mode&quot;" line779="    //%weight=17" line780="    export function getSpriteArray() {" line781="        return sprites.allOfKind(SpriteKind._unifont)" line782="    }" line783="" line784="    /**" line785="     * get option data number" line786="     * from unifont sprite" line787="     */" line788="    //%blockid=unifont_sprite_readsprdatainnum" line789="    //%block=&quot;get $myUnifont from $NumType&quot;" line790="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line791="    //%group=&quot;sprite mode&quot;" line792="    //%weight=16" line793="    export function getSpriteTextData(myUnifont:Sprite,NumType:SprDataNumType) {" line794="        switch (NumType) {" line795="            case 1:" line796="            return sprdata.readDataNumber(myUnifont,&quot;scol&quot;);" line797="            case 2:" line798="            return sprdata.readDataNumber(myUnifont,&quot;socol&quot;)" line799="            case 3:" line800="            return sprdata.readDataNumber(myUnifont,&quot;stxw&quot;);" line801="            case 4:" line802="            return sprdata.readDataNumber(myUnifont,&quot;salg&quot;);" line803="            default:" line804="            return -1;" line805="        }" line806="    }" line807="" line808="    /**" line809="     * set alignment as enum" line810="     * to unifont sprite" line811="     */" line812="    //%blockid=unifont_sprite_setalign" line813="    //%block=&quot; $myUnifont=variables_get set align to $alg&quot;" line814="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line815="    //%group=&quot;sprite mode&quot;" line816="    //%weight=14" line817="    export function setSpriteAlign(myUnifont:Sprite,alg:align) {" line818="        if (sprdata.readDataNumber(myUnifont,&quot;salg&quot;) == getAlign(alg)) { return; }" line819="        sprdata.setDataNumber(myUnifont,&quot;salg&quot;,getAlign(alg))" line820="        spriteUpdate(myUnifont)" line821="    }" line822="" line823="    /**" line824="     * set alignment as number" line825="     * to unifont sprite" line826="     */" line827="    //%blockid=unifont_sprite_setalignnum" line828="    //%block=&quot; $myUnifont set align value to $aln&quot;" line829="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line830="    //%group=&quot;sprite mode&quot;" line831="    //%weight=12" line832="    export function setSpriteAlignNum(myUnifont:Sprite,aln:number = 0) {" line833="        if (sprdata.readDataNumber(myUnifont,&quot;salg&quot;) == aln) { return; }" line834="        sprdata.setDataNumber(myUnifont,&quot;salg&quot;,aln)" line835="        spriteUpdate(myUnifont)" line836="    }" line837="" line838="    /**" line839="     * add or set dialog frame" line840="     * to unifont sprite" line841="     */" line842="    //%blockid=unifont_sprite_setdialog" line843="    //%block=&quot; $myUnifont set dialog frame to $DlImg=dialog_image_picker&quot;" line844="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line845="    //%group=&quot;sprite mode&quot;" line846="    //%weight=10" line847="    export function setSpriteDialogTxt(myUnifont: Sprite,DlImg: Image) {" line848="        if (sprdata.readDataImage(myUnifont,&quot;sdim&quot;) &amp;&amp; sprdata.readDataImage(myUnifont,&quot;sdim&quot;).equals(DlImg)) { return; }" line849="        sprdata.setDataImage(myUnifont,&quot;sdim&quot;,DlImg)" line850="        spriteUpdate(myUnifont)" line851="    }" line852="" line853="    /**" line854="     * remove dialog frame" line855="     * at unifont sprite" line856="     */" line857="    //%blockid=unifont_sprite_cleardialog" line858="    //%block=&quot; $myUnifont clear dialog frame&quot;" line859="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line860="    //%group=&quot;sprite mode&quot;" line861="    //%weight=9" line862="    export function clearSpriteDialog(myUnifont: Sprite) {" line863="        if (!(sprdata.readDataImage(myUnifont,&quot;sdim&quot;))) { return; }" line864="        sprdata.setDataImage(myUnifont,&quot;sdim&quot;,undefined)" line865="        spriteUpdate(myUnifont)" line866="    }" line867="    " line868="    export enum spacetype {letterspace=1,lineheight=2}" line869="" line870="    /**" line871="     * set gap space " line872="     * to unifont sprite" line873="     */" line874="    //%blockid=unifont_sprite_setlinespace" line875="    //%block=&quot; $myUnifont set $gaptype to $value&quot;" line876="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line877="    //%group=&quot;sprite mode&quot;" line878="    //%weight=8" line879="    export function setGapSpr(myUnifont: Sprite, gaptype: spacetype, value: number = 0) {" line880="        switch (gaptype) {" line881="        case 1:" line882="        if (sprdata.readDataNumber(myUnifont,&quot;spacew&quot;) == value) { return; }" line883="        sprdata.setDataNumber(myUnifont,&quot;spacew&quot;,value)" line884="        break;" line885="        case 2:" line886="        if (sprdata.readDataNumber(myUnifont,&quot;lineh&quot;) == value) { return; }" line887="        sprdata.setDataNumber(myUnifont,&quot;lineh&quot;,value)" line888="        break;" line889="        default:" line890="        return;" line891="        }" line892="        spriteUpdate(myUnifont)" line893="    }" line894="" line895="    /**" line896="     * clear gap space" line897="     * at unifont sprite" line898="     */" line899="    //%blockid=unifont_sprite_setdefaultlinespace" line900="    //%block=&quot; $myUnifont set $gaptype to default value&quot;" line901="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line902="    //%group=&quot;sprite mode&quot;" line903="    //%weight=7" line904="    export function setDefaultGapSpr(myUnifont: Sprite, gaptype: spacetype) {" line905="        switch (gaptype) {" line906="        case 1:" line907="        if (sprdata.readDataNumber(myUnifont,&quot;spacew&quot;) == undefined) { return; }" line908="        sprdata.setDataNumber(myUnifont,&quot;spacew&quot;,undefined)" line909="        break;" line910="        case 2:" line911="        if (sprdata.readDataNumber(myUnifont,&quot;lineh&quot;) == undefined) { return; }" line912="        sprdata.setDataNumber(myUnifont,&quot;lineh&quot;,undefined)" line913="        break;" line914="        default:" line915="        return;" line916="        }" line917="        spriteUpdate(myUnifont)" line918="    }" line919="" line920="    /**" line921="     * set text to render" line922="     * to unifont sprite" line923="     */" line924="    //%blockid=unifont_sprite_settextdata" line925="    //%block=&quot; $myUnifont set text to $Text&quot;" line926="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line927="    //%group=&quot;sprite mode&quot;" line928="    //%weight=20" line929="    export function setSpriteText(myUnifont: Sprite,Text: string = &quot;&quot;) {" line930="        if (sprdata.readDataString(myUnifont,&quot;stxt&quot;) == Text) { return; }" line931="        sprdata.setDataString(myUnifont,&quot;stxt&quot;,Text)" line932="        spriteUpdate(myUnifont)" line933="    }" line934="" line935="    export enum colortype {solidcolor=1,outlinecolor=2}" line936="" line937="    /**" line938="     * set text color index" line939="     * to unifont sprite" line940="     */" line941="    //%blockid=unifont_sprite_settextcolor" line942="    //%block=&quot; $myUnifont set $colortexttype to $ncolor&quot;" line943="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line944="    //%ncolor.shadow=colorindexpicker" line945="    //%group=&quot;sprite mode&quot;" line946="    //%weight=6" line947="    export function setSpriteTextCol(myUnifont: Sprite,colortexttype:colortype,ncolor: number = 0) {" line948="        switch (colortexttype) {" line949="        case 1:" line950="        if (sprdata.readDataNumber(myUnifont,&quot;scol&quot;) == ncolor) { return; }" line951="        sprdata.setDataNumber(myUnifont,&quot;scol&quot;,ncolor)" line952="        break;" line953="        case 2:" line954="        if (sprdata.readDataNumber(myUnifont,&quot;socol&quot;) == ncolor) { return; }" line955="        sprdata.setDataNumber(myUnifont,&quot;socol&quot;,ncolor)" line956="        break;" line957="        default:" line958="        return;" line959="        }" line960="        spriteUpdate(myUnifont)" line961="    }" line962="" line963="    /**" line964="     * set table id " line965="     * to unifont sprite" line966="     */" line967="    //%blockid=unifont_sprite_settableid" line968="    //%block=&quot; $myUnifont set Table id to $Tid&quot;" line969="    //%Tid.shadow=unifont_tablenameshadow Tid.defl=&quot;fonttemp&quot;" line970="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line971="    //%group=&quot;sprite mode&quot;" line972="    //%weight=2" line973="    export function setSpriteTableId(myUnifont: Sprite,Tid: string = &quot;fonttemp&quot;) {" line974="        if (sprdata.readDataString(myUnifont,&quot;stid&quot;) == Tid) { return; }" line975="        sprdata.setDataString(myUnifont,&quot;stid&quot;,Tid)" line976="        spriteUpdate(myUnifont)" line977="    }" line978="" line979="    /**" line980="     * set page width" line981="     * to unifont sprite" line982="     */" line983="    //%blockid=unifont_sprite_setpagewidth" line984="    //%block=&quot; $myUnifont set page width to $PageW&quot;" line985="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line986="    //%group=&quot;sprite mode&quot;" line987="    //%weight=4" line988="    export function setSpritePageWidth(myUnifont: Sprite, PageW: number = 0) {" line989="        if (sprdata.readDataNumber(myUnifont,&quot;stxw&quot;) == PageW) { return; }" line990="        sprdata.setDataNumber(myUnifont,&quot;stxw&quot;,PageW)" line991="        spriteUpdate(myUnifont)" line992="    }" line993="" line994="    export enum delaytype {delaypermsec=1,multisec=2}" line995="" line996="    /**" line997="     * play text animation" line998="     * from unifont sprite" line999="     */" line1000="    //%blockid=unifont_sprite_playanimatiom" line1001="    //%block=&quot; $myUnifont get animation play for pause type $delaymode in (ms) $secval||and paused $pausev&quot;" line1002="    //%secval.defl=100" line1003="    //%myUnifont.shadow=variables_get myUnifont.defl=myUnifont" line1004="    //%group=&quot;sprite mode&quot;" line1005="    //%weight=1" line1006="    export function getSpriteAnimPlay(myUnifont: Sprite,delaymode:delaytype,secval:number,pausev:boolean=false) {" line1007="        if (sprdata.readDataBoolean(myUnifont, &quot;anim&quot;)) return;" line1008="        sprdata.setDataNumber(myUnifont,&quot;scval&quot;,0)" line1009="        let umsec = 0; let lensec = 0;" line1010="        if (sprdata.readDataImage(myUnifont, &quot;sdim&quot;)) {" line1011="            sprdata.setDataImageArray(myUnifont, &quot;imgarr&quot;, StampStrArrToDialog(sprdata.readDataImage(myUnifont, &quot;sdim&quot;), sprdata.readDataString(myUnifont, &quot;stxt&quot;), sprdata.readDataNumber(myUnifont, &quot;stxw&quot;), sprdata.readDataString(myUnifont, &quot;stid&quot;), sprdata.readDataNumber(myUnifont, &quot;scol&quot;), sprdata.readDataNumber(myUnifont, &quot;socol&quot;), sprdata.readDataNumber(myUnifont, &quot;salg&quot;), sprdata.readDataNumber(myUnifont, &quot;spacew&quot;), sprdata.readDataNumber(myUnifont, &quot;lineh&quot;)))" line1012="        } else {" line1013="            sprdata.setDataImageArray(myUnifont, &quot;imgarr&quot;, SetTextImageArray(sprdata.readDataString(myUnifont, &quot;stxt&quot;), sprdata.readDataNumber(myUnifont, &quot;stxw&quot;), sprdata.readDataString(myUnifont, &quot;stid&quot;), sprdata.readDataNumber(myUnifont, &quot;scol&quot;), sprdata.readDataNumber(myUnifont, &quot;socol&quot;), sprdata.readDataNumber(myUnifont, &quot;salg&quot;), false, sprdata.readDataNumber(myUnifont, &quot;spacew&quot;), sprdata.readDataNumber(myUnifont, &quot;lineh&quot;)))" line1014="        }" line1015="        switch (delaymode) {" line1016="            case 1:" line1017="                sprdata.setDataNumber(myUnifont,&quot;scval&quot;,secval)" line1018="                umsec = secval" line1019="                lensec = secval * sprdata.readDataImageArray(myUnifont, &quot;imgarr&quot;).length" line1020="            break;" line1021="            case 2:" line1022="                sprdata.setDataNumber(myUnifont,&quot;scval&quot;,secval / sprdata.readDataImageArray(myUnifont,&quot;imgarr&quot;).length)" line1023="                umsec = secval" line1024="                lensec = secval" line1025="            break;" line1026="            default:" line1027="            return;" line1028="        }" line1029="        sprdata.setDataNumber(myUnifont, &quot;sidx&quot;, 0)" line1030="        if (pausev) {" line1031="            sprdata.setDataBoolean(myUnifont, &quot;anim&quot;, true)" line1032="            sprdata.setDataBoolean(myUnifont, &quot;anip&quot;, false)" line1033="            background( function() {" line1034="                for (let i = 0; i &lt; sprdata.readDataImageArray(myUnifont, &quot;imgarr&quot;).length; i++) {" line1035="                    myUnifont.setImage(sprdata.readDataImageArray(myUnifont, &quot;imgarr&quot;)[i])" line1036="                    pause(sprdata.readDataNumber(myUnifont, &quot;scval&quot;))" line1037="                }" line1038="            })" line1039="            myUnifont.setImage(sprdata.readDataImage(myUnifont, &quot;nextimg&quot;))" line1040="            sprdata.setDataBoolean(myUnifont, &quot;anim&quot;, false)" line1041="            return;" line1042="        }" line1043="        if (!sprdata.readDataBoolean(myUnifont, &quot;anim&quot;) &amp;&amp; !(sprdata.readDataBoolean(myUnifont, &quot;anip&quot;))) {" line1044="            sprdata.setDataBoolean(myUnifont, &quot;anip&quot;, true)" line1045="            sprdata.setDataBoolean(myUnifont, &quot;anim&quot;, true)" line1046="            animation.runImageAnimation(myUnifont, sprdata.readDataImageArray(myUnifont, &quot;imgarr&quot;), sprdata.readDataNumber(myUnifont, &quot;scval&quot;), false)" line1047="        } else if (myUnifont.image.equals(sprdata.readDataImage(myUnifont, &quot;nextimg&quot;))) {" line1048="            sprdata.setDataBoolean(myUnifont, &quot;anip&quot;, false)" line1049="            sprdata.setDataBoolean(myUnifont, &quot;anim&quot;, false)" line1050="        }" line1051="        after( lensec, function () {" line1052="            sprdata.setDataBoolean(myUnifont, &quot;anip&quot;, false)" line1053="            sprdata.setDataBoolean(myUnifont, &quot;anim&quot;, false)" line1054="            myUnifont.setImage(sprdata.readDataImage(myUnifont, &quot;nextimg&quot;))" line1055="        })" line1056="    }" line1057="}" numlines="1058"></mutation></block></statement></block></xml>